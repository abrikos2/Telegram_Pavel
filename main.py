import asyncio
import logging
import os
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import FSInputFile
from aiogram.filters import Command
from keyboards import keyboardMain, keyboardPay, keyboardMenu
import datetime
import json
API_TOKEN = ""
PAYMENTS_TOKEN= ""
with open(os.path.join(os.path.dirname(os.path.abspath(__file__)), "settings.json")) as f:
    data = json.load(f)
    API_TOKEN = data["API_TOKEN"]
    PAYMENTS_TOKEN = data["PAYMENTS_TOKEN"]
dp = Dispatcher()
bot = Bot(API_TOKEN)
PRICE_BASE = types.LabeledPrice(label="–ü–æ–¥–ø–∏—Å–∫–∞", amount=35000*100)
PRICE_PRO = types.LabeledPrice(label="–ü–æ–¥–ø–∏—Å–∫–∞", amount=45000*100)
async def logger(message: types.Message):
    try:
        with open(os.path.join(os.path.dirname(os.path.abspath(__file__)), "log.txt"), "a+", encoding="utf-8") as log:
            log.write(f"{datetime.datetime.now()} @{message.chat.username} ==> {message.text if message.text != None else "–û–ø–ª–∞—Ç–∏–ª –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –±–∞–∑–æ–≤—ã–π –∫—É—Ä—Å "if message.successful_payment.invoice_payload == "–ë–∞–∑–æ–≤—ã–π –∫—É—Ä—Å"  else "–û–ø–ª–∞—Ç–∏–ª –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∫—É—Ä—Å " if message.successful_payment.invoice_payload == "–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∫—É—Ä—Å"else message.text}\n")
            log.close()
    except FileNotFoundError:
        with open(os.path.join(os.path.dirname(os.path.abspath(__file__)), "log.txt"), "a+", encoding="utf-8") as log:
            log.write(f"{datetime.datetime.now()} @{message.chat.username} ==>  {message.text if message.text != None else "–û–ø–ª–∞—Ç–∏–ª –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –±–∞–∑–æ–≤—ã–π –∫—É—Ä—Å "if message.successful_payment.invoice_payload == "–ë–∞–∑–æ–≤—ã–π –∫—É—Ä—Å"  else "–û–ø–ª–∞—Ç–∏–ª –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∫—É—Ä—Å " if message.successful_payment.invoice_payload == "–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∫—É—Ä—Å"else message.text}\n")
            log.close()

        
@dp.message(F.text, Command("start"))
async def buy(message: types.Message):
    await logger(message)
    await bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä –≤–∏–¥–µ–æ–º–æ–Ω—Ç–∞–∂–∞!\
    –ó–¥–µ—Å—å –≤—ã —Å–º–æ–∂–µ—Ç–µ –Ω–∞—É—á–∏—Ç—å—Å—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–º—É —è–∑—ã–∫—É, –≤–Ω–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–∞—à–µ–≥–æ —É—Ä–æ–≤–Ω—è –∏ –æ–ø—ã—Ç–∞.\
    –í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–¥—Ö–æ–¥–∏—Ç –∏–º–µ–Ω–Ω–æ –≤–∞–º:\
    –ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å? –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ!", reply_markup=keyboardMain())
    
    
    
@dp.callback_query()
async def callback(call: types.CallbackQuery):
    #if PAYMENTS_TOKEN.split(':')[1] == 'TEST':
    #    await bot.send_message(call.message.chat.id, "–¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂!!!")
    await bot.delete_message(call.message.chat.id, call.message.message_id)
    if call.data == '–±–∞–∑–æ–≤—ã–π –∫—É—Ä—Å':
        await bot.send_photo(call.message.chat.id, photo=FSInputFile("photo_base.jpg"))
        await bot.send_invoice(call.message.chat.id,
                           title="–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –±–∞–∑–æ–≤—ã–π –∫—É—Ä—Å –ø–æ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º—É —è–∑—ã–∫—É",
                           description="–ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫—É—Ä—Å—ã –ø–æ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º—É —è–∑—ã–∫—É ",
                           provider_token=PAYMENTS_TOKEN,
                           currency="rub",
                           is_flexible=False,
                           prices=[PRICE_BASE],
                           payload="–ë–∞–∑–æ–≤—ã–π –∫—É—Ä—Å"
                           )
    elif call.data == '—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∫—É—Ä—Å':
        await bot.send_photo(call.message.chat.id, photo=FSInputFile("photo_pro.jpg"))
        await bot.send_invoice(call.message.chat.id,
                        title="–ü–æ–¥–ø–∏—Å–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∫—É—Ä—Å –ø–æ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º—É —è–∑—ã–∫—É",
                        description="–ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫—É—Ä—Å—ã –ø–æ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º—É —è–∑—ã–∫—É ",
                        provider_token=PAYMENTS_TOKEN,
                        currency="rub",
                        is_flexible=False,
                        prices=[PRICE_PRO],
                        payload="–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∫—É—Ä—Å")
    elif call.data == '–û–ø–∏—Å–∞–Ω–∏–µ –∫—É—Ä—Å–æ–≤':
        await bot.send_message(call.message.chat.id, "–î–∞–Ω–Ω—ã–µ –∫—É—Ä—Å—ã –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω—ã –¥–ª—è –≤—Å–µ—Ö —É—Ä–æ–≤–Ω–µ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏.–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –Ω–∞—á–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –∏–ª–∏ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π.–í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–∞—à–∏—Ö –∑–Ω–∞–Ω–∏–π –∏ —É–º–µ–Ω–∏–π –Ω–∞ —Ç–µ–∫—É—â–µ–π –º–æ–º–µ–Ω—Ç.–í–æ –≤—Å–µ—Ö –≤–∏–¥–µ–æ —Ä–æ–ª–∏–∫–∞—Ö –¥–µ—Ç–∞–ª—å–Ω–æ —Ä–∞–∑–±–∏—Ä–∞—é—Ç—Å—è –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–º–µ–Ω—Ç—ã –ø–æ —Ç–µ–º–µ –≤ —Å—Ä–µ–¥–Ω–µ–º —Ç–µ–º–ø–µ.–ü–æ—ç—Ç–æ–º—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ª–µ–≥–∫–æ —É—Å–≤–æ–∏—Ç—å –≤–Ω–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–æ–∑—Ä–∞—Å—Ç–∞ –∏–ª–∏ –ø–æ–ª–∞.–î–∞–Ω–Ω—ã–µ –∫—É—Ä—Å—ã –ø–æ–¥–æ–π–¥—É—Ç –∫–∞–∫ –¥–ª—è —Ç–µ—Ö,–∫—Ç–æ –µ—â–µ –Ω–µ –∑–Ω–∞–∫–æ–º —Å —ç—Ç–æ–π —Ç–µ–º–∞—Ç–∏–∫–æ–π,—Ç–∞–∫ –∏ —Ç–µ–º —É –∫–æ–≥–æ —É–∂–µ –∏–º–µ—é—Ç—Å—è –∫–æ–µ-–∫–∞–∫–∏–µ –Ω–∞–≤—ã–∫–∏,–Ω–æ –Ω–µ–¥–æ—Å—Ç–∞–µ—Ç –∑–Ω–∞–Ω–∏–π –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã—Ö –∏ –ª—É—á—à–µ –æ–ø–ª–∞—á–∏–≤–∞–µ–º—ã—Ö —Ä–∞–±–æ—Ç.–ü–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—é –±–∞–∑–æ–≤–æ–≥–æ –∫—É—Ä—Å–∞ —Å—Ç—É–¥–µ–Ω—Ç –±—É–¥–µ—Ç –∑–Ω–∞—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã —Ä–∞–±–æ—Ç—ã –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ –∏ –≥–ª–∞–≤–Ω—ã–µ –º–µ—Ç–æ–¥–∏–∫–∏ –∏ —Å–ø–æ—Å–æ–±—ã —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–Ω—Ç–∞–∂–∞ –≤–∏–¥–µ–æ.–í –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–º –∫—É—Ä—Å–µ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã —ç–ª–µ–º–µ–Ω—Ç—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –º–æ–Ω—Ç–∞–∂–∞,–∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –¥–ª—è —Ä–∞–±–æ—Ç—ã –Ω–∞–¥ –º—É–∑—ã–∫–∞–ª—å–Ω—ã–º–∏ –∫–ª–∏–ø–∞–º–∏ –∏ –¥–∞–∂–µ –∫–∏–Ω–æ", reply_markup=keyboardPay())
    elif call.data == 'FAQ':
        await bot.send_message(call.message.chat.id, "–ó–¥–µ—Å—å –±—É–¥—É—Ç —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã")
    elif call.data == "–û—Ç–∑—ã–≤—ã":
        await bot.send_message(call.message.chat.id, "–ó–¥–µ—Å—å –±—É–¥–µ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª —Å –æ—Ç–∑—ã–≤–∞–º–∏")
    elif call.data == "–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è": 
        await bot.send_message(call.message.chat.id, "–ó–¥–µ—Å—å –±—É–¥–µ—Ç –∫–æ–Ω—Ç–∞–Ω–∫—Ç –¥–ª—è —Å–≤—è–∑–∏")
    elif call.data == "–ù–∞–∑–∞–¥" or "menu":
        await buy(call.message)

@dp.pre_checkout_query(lambda query: True)
async def pre_checkout_query(pre_checkout_q: types.PreCheckoutQuery):
    await bot.answer_pre_checkout_query(pre_checkout_q.id, ok=True)

@dp.channel_post()
async def get_channel_id(message: types.Message):
    channel_id = message.chat.id
    print(channel_id)

@dp.message(F.content_type == types.ContentType.SUCCESSFUL_PAYMENT)
async def process_sucessful_payment(message: types.Message):
    await bot.delete_messages(message.chat.id, [message.message_id, message.message_id-1, message.message_id-2])
    await bot.send_message(message.chat.id, "–î–∞–Ω–Ω—ã–π –±–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–æ–∫")
    if message.successful_payment.invoice_payload == "–ë–∞–∑–æ–≤—ã–π –∫—É—Ä—Å":
        await logger(message)
        invite_link = await bot.create_chat_invite_link(chat_id=-1002168428229, member_limit=1)
        await bot.send_message(message.chat.id, f"{invite_link.invite_link}")
    if message.successful_payment.invoice_payload == "–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∫—É—Ä—Å":
        await logger(message)
        invite_link = await bot.create_chat_invite_link(chat_id=-1002285663690, member_limit=1)
        await bot.send_message(message.chat.id, f"{invite_link.invite_link}")


async def main():
    logging.basicConfig(level=logging.INFO)
    bot = Bot(token=API_TOKEN)
    await dp.start_polling(bot)
if __name__ == "__main__":
    asyncio.run(main())

